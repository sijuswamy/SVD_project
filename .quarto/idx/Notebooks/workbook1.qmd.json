{"title":"SVD workbook","markdown":{"yaml":{"title":"SVD workbook","format":"html","jypiter":"python3"},"headingText":"Assessing quality of compression","containsRefs":false,"markdown":"\n\n\n\n:::{.panel-tabset}\n\n### Code\n\n```{.matlab}\n% Calculate Mean Squared Error (MSE)\nmse = mean((A(:) - A_k(:)).^2);\n\n% Calculate Peak Signal-to-Noise Ratio (PSNR)\nmax_pixel_value = 255; % Maximum pixel value for 8-bit images\npsnr = 10 * log10((max_pixel_value^2) / mse);\n\n% Calculate sizes\noriginal_size = numel(A) * 8; % Size of the original image in bytes (double data type)\ncompressed_size = (k * (size(A, 1) + size(A, 2))) * 8; % Size of compressed representation (U, S_k, V)\n\n% Display results\nfprintf('Mean Squared Error (MSE): %.4f\\n', mse);\nfprintf('Peak Signal-to-Noise Ratio (PSNR): %.4f dB\\n', psnr);\nfprintf('Original Image Size: %.2f KB\\n', original_size / 1024); % Convert to KB\nfprintf('Compressed Image Size: %.2f KB\\n', compressed_size / 1024); % Convert to KB\nfprintf('Size Reduction: %.2f KB\\n', (original_size - compressed_size) / 1024); % Convert to KB\n```\n\n### Output\n\n```{python}\nimport numpy as np\nfrom skimage.metrics import structural_similarity as ssim\nimport math\n# Mean Squared Error (MSE)\nmse = np.mean((A - A_k) ** 2)\n\n# Peak Signal-to-Noise Ratio (PSNR)\nmax_pixel_value = 255.0  # For an 8-bit image\npsnr = 10 * np.log10((max_pixel_value ** 2) / mse)\n\n# Structural Similarity Index (SSIM)\nssim_index = ssim(A, A_k, data_range=max_pixel_value)\n\n# Compression Ratio (CR)\noriginal_size = A.nbytes\ncompressed_size = (U[:, :k].nbytes + S_k[:k, :k].nbytes + Vt[:k, :].nbytes)\ncompression_ratio = original_size / compressed_size\n\n# Normalized Cross-Correlation (NCC)\nncc = np.sum(A * A_k) / np.sqrt(np.sum(A ** 2) * np.sum(A_k ** 2))\n# Display results\nprint(f\"Mean Squared Error (MSE): {mse:.4f}\")\nprint(f\"Peak Signal-to-Noise Ratio (PSNR): {psnr:.4f} dB\")\nprint(f\"Structural Similarity Index (SSIM): {ssim_index:.4f}\")\nprint(f\"Compression Ratio (CR): {compression_ratio:.2f}\")\nprint(f\"Normalized Cross-Correlation (NCC): {ncc:.4f}\")\nprint(f'Original Image Size: {original_size / 1024:.2f} KB')  # Convert to KB\nprint(f'Compressed Image Size: {compressed_size / 1024:.2f} KB')  # Convert to KB\nprint(f'Size Reduction: {(original_size - compressed_size) / 1024:.2f} KB') \n```\n:::\n\n\n\n```{python}\n#pip install PyWavelets\nimport cv2\nimport numpy as np\nimport pywt\nfrom skimage.metrics import structural_similarity as ssim\nimport matplotlib.pyplot as plt\n\n# Load and convert image to grayscale\nimg = cv2.imread('amrita_campus.jpg', cv2.IMREAD_GRAYSCALE)\n\n# Function to display images side-by-side\ndef display_images(original, compressed, title):\n    plt.figure(figsize=(10,5))\n    plt.subplot(1, 2, 1)\n    plt.imshow(original, cmap='gray')\n    plt.title(\"Original Image\")\n    plt.subplot(1, 2, 2)\n    plt.imshow(compressed, cmap='gray')\n    plt.title(title)\n    plt.show()\n\n# 1. Discrete Cosine Transform (DCT) Compression\ndef dct_compression(img, k=50):\n    img = img.astype(np.float32)\n    dct_img = cv2.dct(img)  # Apply DCT\n    dct_img[np.abs(dct_img) < k] = 0  # Thresholding\n    compressed_img = cv2.idct(dct_img)  # Apply inverse DCT\n    display_images(img, compressed_img, \"DCT Compressed Image\")\n    return compressed_img\n\n# 2. Wavelet Transform Compression (JPEG 2000 equivalent)\ndef wavelet_compression(img, wavelet='haar', level=1, threshold=10):\n    coeffs = pywt.wavedec2(img, wavelet, level=level)\n    coeffs_thresholded = []\n    for c in coeffs:\n        if isinstance(c, tuple):  # For detail coefficients\n            coeffs_thresholded.append(tuple(pywt.threshold(arr, threshold, mode='soft') for arr in c))\n        else:  # For approximation coefficients\n            coeffs_thresholded.append(pywt.threshold(c, threshold, mode='soft'))\n    compressed_img = pywt.waverec2(coeffs_thresholded, wavelet)\n    display_images(img, compressed_img, \"Wavelet Compressed Image\")\n    return compressed_img\n\n# 3. Fractal Compression (simplified example with downsampling)\ndef fractal_compression(img, scale_factor=0.5):\n    small_img = cv2.resize(img, (0, 0), fx=scale_factor, fy=scale_factor)\n    compressed_img = cv2.resize(small_img, (img.shape[1], img.shape[0]))  # Upscale back\n    display_images(img, compressed_img, \"Fractal Compressed Image (downsampled)\")\n    return compressed_img\n\n# 4. Run-Length Encoding (RLE) Compression\ndef rle_compression(img):\n    pixels = img.flatten()\n    rle = []\n    i = 0\n    while i < len(pixels):\n        count = 1\n        while i + 1 < len(pixels) and pixels[i] == pixels[i + 1]:\n            i += 1\n            count += 1\n        rle.append((pixels[i], count))\n        i += 1\n    # Decoding RLE for display (just a simple reconstruction)\n    decompressed = np.concatenate([np.full(count, val) for val, count in rle])\n    decompressed_img = decompressed.reshape(img.shape)\n    display_images(img, decompressed_img, \"RLE Compressed Image\")\n    return decompressed_img\n\n# 5. Predictive Coding Compression\ndef predictive_coding_compression(img):\n    img = img.astype(np.int16)  # To handle negative differences\n    prediction_error = img.copy()\n    for i in range(1, img.shape[0]):\n        for j in range(1, img.shape[1]):\n            prediction = (img[i-1, j] + img[i, j-1]) // 2\n            prediction_error[i, j] = img[i, j] - prediction\n    compressed_img = np.clip(prediction_error + img.mean(), 0, 255).astype(np.uint8)\n    display_images(img, compressed_img, \"Predictive Coded Image\")\n    return compressed_img\n\n# Run all compression methods\ndct_compressed = dct_compression(img)\nwavelet_compressed = wavelet_compression(img)\nfractal_compressed = fractal_compression(img)\nrle_compressed = rle_compression(img)\npredictive_coded = predictive_coding_compression(img)\n\n```\n\n```{python}\nimport numpy as np\nimport cv2\nimport pywt\nimport matplotlib.pyplot as plt\n\ndef load_image(file_path):\n    img = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)  # Load image in grayscale\n    return img\n\ndef calculate_metrics(original, compressed):\n    mse = np.mean((original - compressed) ** 2)\n    psnr = 10 * np.log10(255**2 / mse) if mse != 0 else float('inf')\n    \n    # Update SSIM to include data_range\n    from skimage.metrics import structural_similarity as ssim\n    ssim_value = ssim(original, compressed, data_range=original.max() - original.min())\n    \n    return mse, psnr, ssim_value\n\ndef svd_compression(img, k=50):\n    A = img.astype(np.float32)\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n    S_k = np.zeros_like(S)\n    S_k[:k] = S[:k]\n    A_k = np.dot(U, np.dot(np.diag(S_k), Vt))\n\n    compressed = {\n        'U': U[:, :k],\n        'S': S_k[:k],\n        'Vt': Vt[:k, :]\n    }\n    \n    # Debug: Check sizes\n    compressed_size = compressed['U'].nbytes + compressed['S'].nbytes + compressed['Vt'].nbytes\n    print(f\"SVD Compressed Size: {compressed_size} bytes\")\n    return A_k\n\ndef dct_compression(img, threshold=10):\n    dct = cv2.dct(np.float32(img))\n    dct[dct < threshold] = 0  # Zero out small coefficients\n    idct = cv2.idct(dct)\n\n    # Debug: Check sizes\n    compressed_size = dct.nbytes + idct.nbytes\n    print(f\"DCT Compressed Size: {compressed_size} bytes\")\n    return idct\n\ndef wavelet_compression(img, threshold=0.1):\n    coeffs = pywt.wavedec2(img, 'haar', level=2)\n    coeffs_thresholded = [coeffs[0]] + [tuple(pywt.threshold(c, threshold, mode='soft') for c in detail) for detail in coeffs[1:]]\n    \n    # Reconstruct the image from the thresholded coefficients\n    img_reconstructed = pywt.waverec2(coeffs_thresholded, 'haar')\n    \n    # Calculate the compressed size correctly\n    compressed_size = sum(c.nbytes for c in coeffs_thresholded[1]) + coeffs_thresholded[0].nbytes + img_reconstructed.nbytes\n    print(f\"Wavelet Compressed Size: {compressed_size} bytes\")\n    \n    return img_reconstructed\n\ndef display_images(original, compressed, title1, title2):\n    plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(title1)\n    plt.imshow(original, cmap='gray')\n    plt.axis('off')\n\n    plt.subplot(1, 2, 2)\n    plt.title(title2)\n    plt.imshow(compressed, cmap='gray')\n    plt.axis('off')\n\n    plt.show()\n\ndef main():\n    file_path = r'D:\\SVD_project\\amrita_campus.jpg'  # Use a raw string for Windows paths\n    original_image = load_image(file_path)\n\n    # Get original image size in KB\n    original_size = original_image.nbytes / 1024  # Convert bytes to KB\n\n    # Perform compression\n    svd_compressed = svd_compression(original_image)\n    dct_compressed = dct_compression(original_image)\n    wavelet_compressed = wavelet_compression(original_image)\n\n    # Calculate metrics\n    svd_mse, svd_psnr, svd_ssim = calculate_metrics(original_image, svd_compressed)\n    dct_mse, dct_psnr, dct_ssim = calculate_metrics(original_image, dct_compressed)\n    wavelet_mse, wavelet_psnr, wavelet_ssim = calculate_metrics(original_image, wavelet_compressed)\n\n    # Calculate Compressed Sizes and additional metrics\n    svd_compressed_size = svd_compressed.nbytes / 1024  # Size in KB\n    dct_compressed_size = dct_compressed.nbytes / 1024  # Size in KB\n    wavelet_compressed_size = wavelet_compressed.nbytes / 1024  # Size in KB\n\n    svd_cr = original_size / svd_compressed_size\n    dct_cr = original_size / dct_compressed_size\n    wavelet_cr = original_size / wavelet_compressed_size\n\n    # NCC calculation\n    def normalized_cross_correlation(original, compressed):\n        return np.sum(original * compressed) / (np.linalg.norm(original) * np.linalg.norm(compressed))\n\n    svd_ncc = normalized_cross_correlation(original_image, svd_compressed)\n    dct_ncc = normalized_cross_correlation(original_image, dct_compressed)\n    wavelet_ncc = normalized_cross_correlation(original_image, wavelet_compressed)\n\n    # Size Reduction\n    svd_size_reduction = original_size - svd_compressed_size\n    dct_size_reduction = original_size - dct_compressed_size\n    wavelet_size_reduction = original_size - wavelet_compressed_size\n\n    # Print Comparison Table\n    print(f\"{'Method':<10} {'MSE':<20} {'PSNR (dB)':<15} {'SSIM':<15} {'CR':<10} {'NCC':<10} {'Compressed Size (KB)':<25} {'Size Reduction (KB)':<20}\")\n    print(f\"{'SVD':<10} {svd_mse:<20.4f} {svd_psnr:<15.4f} {svd_ssim:<15.4f} {svd_cr:<10.2f} {svd_ncc:<10.4f} {svd_compressed_size:<25.2f} {svd_size_reduction:<20.2f}\")\n    print(f\"{'DCT':<10} {dct_mse:<20.4f} {dct_psnr:<15.4f} {dct_ssim:<15.4f} {dct_cr:<10.2f} {dct_ncc:<10.4f} {dct_compressed_size:<25.2f} {dct_size_reduction:<20.2f}\")\n    print(f\"{'Wavelet':<10} {wavelet_mse:<20.4f} {wavelet_psnr:<15.4f} {wavelet_ssim:<15.4f} {wavelet_cr:<10.2f} {wavelet_ncc:<10.4f} {wavelet_compressed_size:<25.2f} {wavelet_size_reduction:<20.2f}\")\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n```{python}\nimport numpy as np\nimport cv2\nimport pywt\nimport matplotlib.pyplot as plt\nfrom skimage.metrics import structural_similarity as ssim\n\ndef load_image(file_path):\n    img = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)  # Load image in grayscale\n    return img\n\ndef calculate_metrics(original, compressed):\n    mse = np.mean((original - compressed) ** 2)\n    psnr = 10 * np.log10(255**2 / mse) if mse != 0 else float('inf')\n    ssim_value = ssim(original, compressed, data_range=original.max() - original.min())\n    return mse, psnr, ssim_value\n\ndef svd_compression(img, k=20):\n    A = img.astype(np.float32)\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n    S_k = np.zeros_like(S)\n    S_k[:k] = S[:k]\n    A_k = np.dot(U[:, :k], np.dot(np.diag(S_k[:k]), Vt[:k, :]))\n\n    compressed = {\n        'U': U[:, :k],\n        'S': S_k[:k],\n        'Vt': Vt[:k, :]\n    }\n    \n    # Calculate the size of compressed data\n    compressed_size = compressed['U'].nbytes + compressed['S'].nbytes + compressed['Vt'].nbytes\n    print(f\"SVD Compressed Size: {compressed_size} bytes\")\n    return A_k, compressed_size\n\ndef dct_compression(img, threshold=10):\n    dct = cv2.dct(np.float32(img))\n    dct[dct < threshold] = 0  # Zero out small coefficients\n    \n    # Count non-zero coefficients\n    non_zero_coeffs = np.count_nonzero(dct)\n    compressed_size = dct.nbytes - (dct.size - non_zero_coeffs) * dct.dtype.itemsize  # Size excluding zeros\n\n    idct = cv2.idct(dct)  # Reconstruct the image (not needed for size calculation)\n\n    print(f\"DCT Compressed Size: {compressed_size} bytes\")\n    return idct, compressed_size\n\ndef wavelet_compression(image, wavelet='haar', threshold=0.2):\n    # Perform 2D wavelet decomposition\n    coeffs = pywt.wavedec2(image, wavelet)\n    \n    # Threshold the detail coefficients\n    coeffs_thresholded = list(coeffs)\n    for i in range(1, len(coeffs_thresholded)):\n        coeffs_thresholded[i] = tuple(pywt.threshold(c, threshold, mode='soft') for c in coeffs_thresholded[i])\n    \n    # Calculate compressed size\n    compressed_size = sum(np.prod(c.shape) * c.dtype.itemsize for detail in coeffs_thresholded[1:] for c in detail) + coeffs_thresholded[0].nbytes\n    \n    # Reconstruct the image\n    img_reconstructed = pywt.waverec2(coeffs_thresholded, wavelet)\n    \n    return img_reconstructed, compressed_size\n\ndef display_images(original, compressed, title1, title2):\n    plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(title1)\n    plt.imshow(original, cmap='gray')\n    plt.axis('off')\n\n    plt.subplot(1, 2, 2)\n    plt.title(title2)\n    plt.imshow(compressed, cmap='gray')\n    plt.axis('off')\n\n    plt.show()\n\ndef main():\n    file_path = r'D:\\SVD_project\\amrita_campus.jpg'  # Use a raw string for Windows paths\n    original_image = load_image(file_path)\n\n    # Get original image size in bytes\n    original_size = original_image.nbytes  # Size in bytes\n\n    # Perform compression\n    svd_compressed, svd_compressed_size = svd_compression(original_image)\n    dct_compressed, dct_compressed_size = dct_compression(original_image)\n    wavelet_compressed, wavelet_compressed_size = wavelet_compression(original_image)\n\n    # Calculate metrics\n    svd_mse, svd_psnr, svd_ssim = calculate_metrics(original_image, svd_compressed)\n    dct_mse, dct_psnr, dct_ssim = calculate_metrics(original_image, dct_compressed)\n    wavelet_mse, wavelet_psnr, wavelet_ssim = calculate_metrics(original_image, wavelet_compressed)\n    \n    # Calculate Compressed Sizes and additional metrics\n    svd_cr = original_size / svd_compressed_size\n    dct_cr = original_size / dct_compressed_size\n    wavelet_cr = original_size / wavelet_compressed_size\n\n    # NCC calculation\n    def normalized_cross_correlation(original, compressed):\n        return np.sum(original * compressed) / (np.linalg.norm(original) * np.linalg.norm(compressed))\n\n    svd_ncc = normalized_cross_correlation(original_image, svd_compressed)\n    dct_ncc = normalized_cross_correlation(original_image, dct_compressed)\n    wavelet_ncc = normalized_cross_correlation(original_image, wavelet_compressed)\n\n    # Size Reduction\n    svd_size_reduction = original_size - svd_compressed_size\n    dct_size_reduction = original_size - dct_compressed_size\n    wavelet_size_reduction = original_size - wavelet_compressed_size\n\n    # Print Comparison Table\n    print(f\"{'Method':<10} {'MSE':<20} {'PSNR (dB)':<15} {'SSIM':<15} {'CR':<10} {'NCC':<10} {'Compressed Size (KB)':<25} {'Size Reduction (KB)':<20}\")\n    print(f\"{'SVD':<10} {svd_mse:<20.4f} {svd_psnr:<15.4f} {svd_ssim:<15.4f} {svd_cr:<10.2f} {svd_ncc:<10.4f} {svd_compressed_size/1024:<25.2f} {svd_size_reduction/1024:<20.2f}\")\n    print(f\"{'DCT':<10} {dct_mse:<20.4f} {dct_psnr:<15.4f} {dct_ssim:<15.4f} {dct_cr:<10.2f} {dct_ncc:<10.4f} {dct_compressed_size/1024:<25.2f} {dct_size_reduction/1024:<20.2f}\")\n    print(f\"{'Wavelet':<10} {wavelet_mse:<20.4f} {wavelet_psnr:<15.4f} {wavelet_ssim:<15.4f} {wavelet_cr:<10.2f} {wavelet_ncc:<10.4f} {wavelet_compressed_size/1024:<25.2f} {wavelet_size_reduction/1024:<20.2f}\")\n    display_images(original_image, svd_compressed,\"original\",\"compressed\")\nif __name__ == \"__main__\":\n    main()\n    \n```\n\n```{python}\nimport numpy as np\nfrom skimage import io, color\nimport matplotlib.pyplot as plt\n\n# Load the image and convert it to grayscale\nimage = io.imread('TestImage.jpg')\nif image.ndim == 3:\n    image = color.rgb2gray(image)\nimage = image.astype(float)\n\n# Perform SVD\nU, S, Vt = np.linalg.svd(image, full_matrices=False)\n\n# Set number of components to visualize\nnum_components = 2\n\n# Function to normalize and visualize singular vectors\ndef visualize_singular_vectors(vectors, title, n_components, shape):\n    fig, axs = plt.subplots(1, n_components, figsize=(15, 5))\n    fig.suptitle(title, fontsize=16)\n    for i in range(n_components):\n        vector = vectors[:, i] if title == 'Column Space (U)' else vectors[i, :]\n        # Normalize vector for better visibility\n        normalized_vector = (vector - np.min(vector)) / (np.max(vector) - np.min(vector))\n        axs[i].imshow(normalized_vector.reshape(shape), cmap='gray', aspect='auto')\n        axs[i].axis('off')\n        axs[i].set_title(f'Component {i+1}')\n    plt.show()\n\n# Visualize Column Space (U matrix columns)\nvisualize_singular_vectors(U, \"Column Space (U)\", num_components, (image.shape[0], 1))\n\n# Visualize Row Space (V^T matrix rows)\nvisualize_singular_vectors(Vt, \"Row Space (V^T)\", num_components, (1, image.shape[1]))\n\n# Plot Singular Values\nplt.figure(figsize=(8, 6))\nplt.plot(np.log(1+S), 'o-', label=\"Singular Values\")\nplt.xlabel(\"Index\")\nplt.ylabel(\"Singular Value\")\nplt.title(\"Singular Values Plot\")\nplt.legend()\nplt.grid()\nplt.show()\n\n```\n\n### Ploting the signal and noise part of an image \n\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom skimage import io, color\n\n# Load the image and convert it to grayscale\nimage = io.imread('TestImage.jpg')\nif image.ndim == 3:\n    image = color.rgb2gray(image)\n\n# Perform SVD\nU, S, VT = np.linalg.svd(image, full_matrices=False)\n\n# Number of components to keep\nk = 40  # Adjust this for more or fewer components\n\n# Reconstruct the signal part\nS_k = np.zeros_like(S)  # Create a zero array for singular values\nS_k[:k] = S[:k]  # Keep the largest k singular values\n\n# Reconstruct the signal image\nreconstructed_signal = U @ np.diag(S_k) @ VT\n\n# Extract noise\nnoise = image - reconstructed_signal\n# Convert images to uint8 for saving\nimage_uint8 = (image * 255).astype(np.uint8)\nreconstructed_signal_uint8 = (reconstructed_signal * 255).astype(np.uint8)\nnoise_uint8 = (noise * 255).astype(np.uint8)\n\n# Save each image as a PDF\nio.imsave('original_image.pdf', image_uint8)\nio.imsave('reconstructed_signal_k_{}.pdf'.format(k), reconstructed_signal_uint8)\nio.imsave('extracted_noise.pdf', noise_uint8)\n# Plotting\nplt.figure(figsize=(15, 10))\n\nplt.subplot(1, 3, 1)\nplt.title('Original Image')\nplt.imshow(image, cmap='gray')\nplt.axis('off')\n\nplt.subplot(1, 3, 2)\nplt.title('Reconstructed Signal (k={})'.format(k))\nplt.imshow(reconstructed_signal, cmap='gray')\nplt.axis('off')\n\nplt.subplot(1, 3, 3)\nplt.title('Extracted Noise')\nplt.imshow(noise, cmap='gray')\nplt.axis('off')\n\nplt.tight_layout()\n# Save the entire figure as a PDF\nplt.savefig('comparison_plot.pdf', bbox_inches='tight')\nplt.show()\n```\n\n\n### Compression quality with different values of k\n\n```{python}\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom skimage import io, color\nfrom skimage.metrics import peak_signal_noise_ratio as psnr\nfrom skimage.metrics import structural_similarity as ssim\n\n# Load the image and convert it to grayscale\nimage = io.imread('TestImage.jpg')\nif image.ndim == 3:\n    image = color.rgb2gray(image)\n\n# Initialize a list to store results\nresults = []\n\n# Define a range of k values\nk_values = [1, 5, 10, 20, 50, 100, 200, 400, 600, 800, 1000]\n\nfor k in k_values:\n    # Perform SVD\n    U, S, VT = np.linalg.svd(image, full_matrices=False)\n\n    # Reconstruct the signal part with k components\n    S_k = np.zeros_like(S)\n    S_k[:k] = S[:k]\n    reconstructed_signal = U @ np.diag(S_k) @ VT\n\n    # Compute PSNR and SSIM\n    current_psnr = psnr(image, reconstructed_signal)\n    \n    # Set data_range for SSIM\n    data_range = 1  # Use 255 if your image is in the range [0, 255]\n    current_ssim = ssim(image, reconstructed_signal, data_range=data_range)\n\n    # Append results\n    results.append({'k': k, 'PSNR': current_psnr, 'SSIM': current_ssim})\n# Create a DataFrame from the results\nresults_df = pd.DataFrame(results)\n\n# Display the DataFrame as a table\nprint(results_df)\n\n# Optionally, save the results to a CSV file\nresults_df.to_csv('psnr_ssim_variation.csv', index=False)\n\n# Plot the results\nplt.figure(figsize=(12, 6))\nplt.plot(results_df['k'], results_df['PSNR'], marker='o', label='PSNR')\nplt.plot(results_df['k'], results_df['SSIM'], marker='o', label='SSIM')\nplt.xscale('log')  # Log scale for better visualization\nplt.xlabel('Number of Components (k)')\nplt.ylabel('Value')\nplt.title('Variation of PSNR and SSIM with Different k Values')\nplt.legend()\nplt.grid()\nplt.savefig('psnr_ssim_variation_plot.pdf')\nplt.show()\n```","srcMarkdownNoYaml":"\n\n## Assessing quality of compression\n\n\n:::{.panel-tabset}\n\n### Code\n\n```{.matlab}\n% Calculate Mean Squared Error (MSE)\nmse = mean((A(:) - A_k(:)).^2);\n\n% Calculate Peak Signal-to-Noise Ratio (PSNR)\nmax_pixel_value = 255; % Maximum pixel value for 8-bit images\npsnr = 10 * log10((max_pixel_value^2) / mse);\n\n% Calculate sizes\noriginal_size = numel(A) * 8; % Size of the original image in bytes (double data type)\ncompressed_size = (k * (size(A, 1) + size(A, 2))) * 8; % Size of compressed representation (U, S_k, V)\n\n% Display results\nfprintf('Mean Squared Error (MSE): %.4f\\n', mse);\nfprintf('Peak Signal-to-Noise Ratio (PSNR): %.4f dB\\n', psnr);\nfprintf('Original Image Size: %.2f KB\\n', original_size / 1024); % Convert to KB\nfprintf('Compressed Image Size: %.2f KB\\n', compressed_size / 1024); % Convert to KB\nfprintf('Size Reduction: %.2f KB\\n', (original_size - compressed_size) / 1024); % Convert to KB\n```\n\n### Output\n\n```{python}\nimport numpy as np\nfrom skimage.metrics import structural_similarity as ssim\nimport math\n# Mean Squared Error (MSE)\nmse = np.mean((A - A_k) ** 2)\n\n# Peak Signal-to-Noise Ratio (PSNR)\nmax_pixel_value = 255.0  # For an 8-bit image\npsnr = 10 * np.log10((max_pixel_value ** 2) / mse)\n\n# Structural Similarity Index (SSIM)\nssim_index = ssim(A, A_k, data_range=max_pixel_value)\n\n# Compression Ratio (CR)\noriginal_size = A.nbytes\ncompressed_size = (U[:, :k].nbytes + S_k[:k, :k].nbytes + Vt[:k, :].nbytes)\ncompression_ratio = original_size / compressed_size\n\n# Normalized Cross-Correlation (NCC)\nncc = np.sum(A * A_k) / np.sqrt(np.sum(A ** 2) * np.sum(A_k ** 2))\n# Display results\nprint(f\"Mean Squared Error (MSE): {mse:.4f}\")\nprint(f\"Peak Signal-to-Noise Ratio (PSNR): {psnr:.4f} dB\")\nprint(f\"Structural Similarity Index (SSIM): {ssim_index:.4f}\")\nprint(f\"Compression Ratio (CR): {compression_ratio:.2f}\")\nprint(f\"Normalized Cross-Correlation (NCC): {ncc:.4f}\")\nprint(f'Original Image Size: {original_size / 1024:.2f} KB')  # Convert to KB\nprint(f'Compressed Image Size: {compressed_size / 1024:.2f} KB')  # Convert to KB\nprint(f'Size Reduction: {(original_size - compressed_size) / 1024:.2f} KB') \n```\n:::\n\n\n\n```{python}\n#pip install PyWavelets\nimport cv2\nimport numpy as np\nimport pywt\nfrom skimage.metrics import structural_similarity as ssim\nimport matplotlib.pyplot as plt\n\n# Load and convert image to grayscale\nimg = cv2.imread('amrita_campus.jpg', cv2.IMREAD_GRAYSCALE)\n\n# Function to display images side-by-side\ndef display_images(original, compressed, title):\n    plt.figure(figsize=(10,5))\n    plt.subplot(1, 2, 1)\n    plt.imshow(original, cmap='gray')\n    plt.title(\"Original Image\")\n    plt.subplot(1, 2, 2)\n    plt.imshow(compressed, cmap='gray')\n    plt.title(title)\n    plt.show()\n\n# 1. Discrete Cosine Transform (DCT) Compression\ndef dct_compression(img, k=50):\n    img = img.astype(np.float32)\n    dct_img = cv2.dct(img)  # Apply DCT\n    dct_img[np.abs(dct_img) < k] = 0  # Thresholding\n    compressed_img = cv2.idct(dct_img)  # Apply inverse DCT\n    display_images(img, compressed_img, \"DCT Compressed Image\")\n    return compressed_img\n\n# 2. Wavelet Transform Compression (JPEG 2000 equivalent)\ndef wavelet_compression(img, wavelet='haar', level=1, threshold=10):\n    coeffs = pywt.wavedec2(img, wavelet, level=level)\n    coeffs_thresholded = []\n    for c in coeffs:\n        if isinstance(c, tuple):  # For detail coefficients\n            coeffs_thresholded.append(tuple(pywt.threshold(arr, threshold, mode='soft') for arr in c))\n        else:  # For approximation coefficients\n            coeffs_thresholded.append(pywt.threshold(c, threshold, mode='soft'))\n    compressed_img = pywt.waverec2(coeffs_thresholded, wavelet)\n    display_images(img, compressed_img, \"Wavelet Compressed Image\")\n    return compressed_img\n\n# 3. Fractal Compression (simplified example with downsampling)\ndef fractal_compression(img, scale_factor=0.5):\n    small_img = cv2.resize(img, (0, 0), fx=scale_factor, fy=scale_factor)\n    compressed_img = cv2.resize(small_img, (img.shape[1], img.shape[0]))  # Upscale back\n    display_images(img, compressed_img, \"Fractal Compressed Image (downsampled)\")\n    return compressed_img\n\n# 4. Run-Length Encoding (RLE) Compression\ndef rle_compression(img):\n    pixels = img.flatten()\n    rle = []\n    i = 0\n    while i < len(pixels):\n        count = 1\n        while i + 1 < len(pixels) and pixels[i] == pixels[i + 1]:\n            i += 1\n            count += 1\n        rle.append((pixels[i], count))\n        i += 1\n    # Decoding RLE for display (just a simple reconstruction)\n    decompressed = np.concatenate([np.full(count, val) for val, count in rle])\n    decompressed_img = decompressed.reshape(img.shape)\n    display_images(img, decompressed_img, \"RLE Compressed Image\")\n    return decompressed_img\n\n# 5. Predictive Coding Compression\ndef predictive_coding_compression(img):\n    img = img.astype(np.int16)  # To handle negative differences\n    prediction_error = img.copy()\n    for i in range(1, img.shape[0]):\n        for j in range(1, img.shape[1]):\n            prediction = (img[i-1, j] + img[i, j-1]) // 2\n            prediction_error[i, j] = img[i, j] - prediction\n    compressed_img = np.clip(prediction_error + img.mean(), 0, 255).astype(np.uint8)\n    display_images(img, compressed_img, \"Predictive Coded Image\")\n    return compressed_img\n\n# Run all compression methods\ndct_compressed = dct_compression(img)\nwavelet_compressed = wavelet_compression(img)\nfractal_compressed = fractal_compression(img)\nrle_compressed = rle_compression(img)\npredictive_coded = predictive_coding_compression(img)\n\n```\n\n```{python}\nimport numpy as np\nimport cv2\nimport pywt\nimport matplotlib.pyplot as plt\n\ndef load_image(file_path):\n    img = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)  # Load image in grayscale\n    return img\n\ndef calculate_metrics(original, compressed):\n    mse = np.mean((original - compressed) ** 2)\n    psnr = 10 * np.log10(255**2 / mse) if mse != 0 else float('inf')\n    \n    # Update SSIM to include data_range\n    from skimage.metrics import structural_similarity as ssim\n    ssim_value = ssim(original, compressed, data_range=original.max() - original.min())\n    \n    return mse, psnr, ssim_value\n\ndef svd_compression(img, k=50):\n    A = img.astype(np.float32)\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n    S_k = np.zeros_like(S)\n    S_k[:k] = S[:k]\n    A_k = np.dot(U, np.dot(np.diag(S_k), Vt))\n\n    compressed = {\n        'U': U[:, :k],\n        'S': S_k[:k],\n        'Vt': Vt[:k, :]\n    }\n    \n    # Debug: Check sizes\n    compressed_size = compressed['U'].nbytes + compressed['S'].nbytes + compressed['Vt'].nbytes\n    print(f\"SVD Compressed Size: {compressed_size} bytes\")\n    return A_k\n\ndef dct_compression(img, threshold=10):\n    dct = cv2.dct(np.float32(img))\n    dct[dct < threshold] = 0  # Zero out small coefficients\n    idct = cv2.idct(dct)\n\n    # Debug: Check sizes\n    compressed_size = dct.nbytes + idct.nbytes\n    print(f\"DCT Compressed Size: {compressed_size} bytes\")\n    return idct\n\ndef wavelet_compression(img, threshold=0.1):\n    coeffs = pywt.wavedec2(img, 'haar', level=2)\n    coeffs_thresholded = [coeffs[0]] + [tuple(pywt.threshold(c, threshold, mode='soft') for c in detail) for detail in coeffs[1:]]\n    \n    # Reconstruct the image from the thresholded coefficients\n    img_reconstructed = pywt.waverec2(coeffs_thresholded, 'haar')\n    \n    # Calculate the compressed size correctly\n    compressed_size = sum(c.nbytes for c in coeffs_thresholded[1]) + coeffs_thresholded[0].nbytes + img_reconstructed.nbytes\n    print(f\"Wavelet Compressed Size: {compressed_size} bytes\")\n    \n    return img_reconstructed\n\ndef display_images(original, compressed, title1, title2):\n    plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(title1)\n    plt.imshow(original, cmap='gray')\n    plt.axis('off')\n\n    plt.subplot(1, 2, 2)\n    plt.title(title2)\n    plt.imshow(compressed, cmap='gray')\n    plt.axis('off')\n\n    plt.show()\n\ndef main():\n    file_path = r'D:\\SVD_project\\amrita_campus.jpg'  # Use a raw string for Windows paths\n    original_image = load_image(file_path)\n\n    # Get original image size in KB\n    original_size = original_image.nbytes / 1024  # Convert bytes to KB\n\n    # Perform compression\n    svd_compressed = svd_compression(original_image)\n    dct_compressed = dct_compression(original_image)\n    wavelet_compressed = wavelet_compression(original_image)\n\n    # Calculate metrics\n    svd_mse, svd_psnr, svd_ssim = calculate_metrics(original_image, svd_compressed)\n    dct_mse, dct_psnr, dct_ssim = calculate_metrics(original_image, dct_compressed)\n    wavelet_mse, wavelet_psnr, wavelet_ssim = calculate_metrics(original_image, wavelet_compressed)\n\n    # Calculate Compressed Sizes and additional metrics\n    svd_compressed_size = svd_compressed.nbytes / 1024  # Size in KB\n    dct_compressed_size = dct_compressed.nbytes / 1024  # Size in KB\n    wavelet_compressed_size = wavelet_compressed.nbytes / 1024  # Size in KB\n\n    svd_cr = original_size / svd_compressed_size\n    dct_cr = original_size / dct_compressed_size\n    wavelet_cr = original_size / wavelet_compressed_size\n\n    # NCC calculation\n    def normalized_cross_correlation(original, compressed):\n        return np.sum(original * compressed) / (np.linalg.norm(original) * np.linalg.norm(compressed))\n\n    svd_ncc = normalized_cross_correlation(original_image, svd_compressed)\n    dct_ncc = normalized_cross_correlation(original_image, dct_compressed)\n    wavelet_ncc = normalized_cross_correlation(original_image, wavelet_compressed)\n\n    # Size Reduction\n    svd_size_reduction = original_size - svd_compressed_size\n    dct_size_reduction = original_size - dct_compressed_size\n    wavelet_size_reduction = original_size - wavelet_compressed_size\n\n    # Print Comparison Table\n    print(f\"{'Method':<10} {'MSE':<20} {'PSNR (dB)':<15} {'SSIM':<15} {'CR':<10} {'NCC':<10} {'Compressed Size (KB)':<25} {'Size Reduction (KB)':<20}\")\n    print(f\"{'SVD':<10} {svd_mse:<20.4f} {svd_psnr:<15.4f} {svd_ssim:<15.4f} {svd_cr:<10.2f} {svd_ncc:<10.4f} {svd_compressed_size:<25.2f} {svd_size_reduction:<20.2f}\")\n    print(f\"{'DCT':<10} {dct_mse:<20.4f} {dct_psnr:<15.4f} {dct_ssim:<15.4f} {dct_cr:<10.2f} {dct_ncc:<10.4f} {dct_compressed_size:<25.2f} {dct_size_reduction:<20.2f}\")\n    print(f\"{'Wavelet':<10} {wavelet_mse:<20.4f} {wavelet_psnr:<15.4f} {wavelet_ssim:<15.4f} {wavelet_cr:<10.2f} {wavelet_ncc:<10.4f} {wavelet_compressed_size:<25.2f} {wavelet_size_reduction:<20.2f}\")\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n```{python}\nimport numpy as np\nimport cv2\nimport pywt\nimport matplotlib.pyplot as plt\nfrom skimage.metrics import structural_similarity as ssim\n\ndef load_image(file_path):\n    img = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)  # Load image in grayscale\n    return img\n\ndef calculate_metrics(original, compressed):\n    mse = np.mean((original - compressed) ** 2)\n    psnr = 10 * np.log10(255**2 / mse) if mse != 0 else float('inf')\n    ssim_value = ssim(original, compressed, data_range=original.max() - original.min())\n    return mse, psnr, ssim_value\n\ndef svd_compression(img, k=20):\n    A = img.astype(np.float32)\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n    S_k = np.zeros_like(S)\n    S_k[:k] = S[:k]\n    A_k = np.dot(U[:, :k], np.dot(np.diag(S_k[:k]), Vt[:k, :]))\n\n    compressed = {\n        'U': U[:, :k],\n        'S': S_k[:k],\n        'Vt': Vt[:k, :]\n    }\n    \n    # Calculate the size of compressed data\n    compressed_size = compressed['U'].nbytes + compressed['S'].nbytes + compressed['Vt'].nbytes\n    print(f\"SVD Compressed Size: {compressed_size} bytes\")\n    return A_k, compressed_size\n\ndef dct_compression(img, threshold=10):\n    dct = cv2.dct(np.float32(img))\n    dct[dct < threshold] = 0  # Zero out small coefficients\n    \n    # Count non-zero coefficients\n    non_zero_coeffs = np.count_nonzero(dct)\n    compressed_size = dct.nbytes - (dct.size - non_zero_coeffs) * dct.dtype.itemsize  # Size excluding zeros\n\n    idct = cv2.idct(dct)  # Reconstruct the image (not needed for size calculation)\n\n    print(f\"DCT Compressed Size: {compressed_size} bytes\")\n    return idct, compressed_size\n\ndef wavelet_compression(image, wavelet='haar', threshold=0.2):\n    # Perform 2D wavelet decomposition\n    coeffs = pywt.wavedec2(image, wavelet)\n    \n    # Threshold the detail coefficients\n    coeffs_thresholded = list(coeffs)\n    for i in range(1, len(coeffs_thresholded)):\n        coeffs_thresholded[i] = tuple(pywt.threshold(c, threshold, mode='soft') for c in coeffs_thresholded[i])\n    \n    # Calculate compressed size\n    compressed_size = sum(np.prod(c.shape) * c.dtype.itemsize for detail in coeffs_thresholded[1:] for c in detail) + coeffs_thresholded[0].nbytes\n    \n    # Reconstruct the image\n    img_reconstructed = pywt.waverec2(coeffs_thresholded, wavelet)\n    \n    return img_reconstructed, compressed_size\n\ndef display_images(original, compressed, title1, title2):\n    plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(title1)\n    plt.imshow(original, cmap='gray')\n    plt.axis('off')\n\n    plt.subplot(1, 2, 2)\n    plt.title(title2)\n    plt.imshow(compressed, cmap='gray')\n    plt.axis('off')\n\n    plt.show()\n\ndef main():\n    file_path = r'D:\\SVD_project\\amrita_campus.jpg'  # Use a raw string for Windows paths\n    original_image = load_image(file_path)\n\n    # Get original image size in bytes\n    original_size = original_image.nbytes  # Size in bytes\n\n    # Perform compression\n    svd_compressed, svd_compressed_size = svd_compression(original_image)\n    dct_compressed, dct_compressed_size = dct_compression(original_image)\n    wavelet_compressed, wavelet_compressed_size = wavelet_compression(original_image)\n\n    # Calculate metrics\n    svd_mse, svd_psnr, svd_ssim = calculate_metrics(original_image, svd_compressed)\n    dct_mse, dct_psnr, dct_ssim = calculate_metrics(original_image, dct_compressed)\n    wavelet_mse, wavelet_psnr, wavelet_ssim = calculate_metrics(original_image, wavelet_compressed)\n    \n    # Calculate Compressed Sizes and additional metrics\n    svd_cr = original_size / svd_compressed_size\n    dct_cr = original_size / dct_compressed_size\n    wavelet_cr = original_size / wavelet_compressed_size\n\n    # NCC calculation\n    def normalized_cross_correlation(original, compressed):\n        return np.sum(original * compressed) / (np.linalg.norm(original) * np.linalg.norm(compressed))\n\n    svd_ncc = normalized_cross_correlation(original_image, svd_compressed)\n    dct_ncc = normalized_cross_correlation(original_image, dct_compressed)\n    wavelet_ncc = normalized_cross_correlation(original_image, wavelet_compressed)\n\n    # Size Reduction\n    svd_size_reduction = original_size - svd_compressed_size\n    dct_size_reduction = original_size - dct_compressed_size\n    wavelet_size_reduction = original_size - wavelet_compressed_size\n\n    # Print Comparison Table\n    print(f\"{'Method':<10} {'MSE':<20} {'PSNR (dB)':<15} {'SSIM':<15} {'CR':<10} {'NCC':<10} {'Compressed Size (KB)':<25} {'Size Reduction (KB)':<20}\")\n    print(f\"{'SVD':<10} {svd_mse:<20.4f} {svd_psnr:<15.4f} {svd_ssim:<15.4f} {svd_cr:<10.2f} {svd_ncc:<10.4f} {svd_compressed_size/1024:<25.2f} {svd_size_reduction/1024:<20.2f}\")\n    print(f\"{'DCT':<10} {dct_mse:<20.4f} {dct_psnr:<15.4f} {dct_ssim:<15.4f} {dct_cr:<10.2f} {dct_ncc:<10.4f} {dct_compressed_size/1024:<25.2f} {dct_size_reduction/1024:<20.2f}\")\n    print(f\"{'Wavelet':<10} {wavelet_mse:<20.4f} {wavelet_psnr:<15.4f} {wavelet_ssim:<15.4f} {wavelet_cr:<10.2f} {wavelet_ncc:<10.4f} {wavelet_compressed_size/1024:<25.2f} {wavelet_size_reduction/1024:<20.2f}\")\n    display_images(original_image, svd_compressed,\"original\",\"compressed\")\nif __name__ == \"__main__\":\n    main()\n    \n```\n\n```{python}\nimport numpy as np\nfrom skimage import io, color\nimport matplotlib.pyplot as plt\n\n# Load the image and convert it to grayscale\nimage = io.imread('TestImage.jpg')\nif image.ndim == 3:\n    image = color.rgb2gray(image)\nimage = image.astype(float)\n\n# Perform SVD\nU, S, Vt = np.linalg.svd(image, full_matrices=False)\n\n# Set number of components to visualize\nnum_components = 2\n\n# Function to normalize and visualize singular vectors\ndef visualize_singular_vectors(vectors, title, n_components, shape):\n    fig, axs = plt.subplots(1, n_components, figsize=(15, 5))\n    fig.suptitle(title, fontsize=16)\n    for i in range(n_components):\n        vector = vectors[:, i] if title == 'Column Space (U)' else vectors[i, :]\n        # Normalize vector for better visibility\n        normalized_vector = (vector - np.min(vector)) / (np.max(vector) - np.min(vector))\n        axs[i].imshow(normalized_vector.reshape(shape), cmap='gray', aspect='auto')\n        axs[i].axis('off')\n        axs[i].set_title(f'Component {i+1}')\n    plt.show()\n\n# Visualize Column Space (U matrix columns)\nvisualize_singular_vectors(U, \"Column Space (U)\", num_components, (image.shape[0], 1))\n\n# Visualize Row Space (V^T matrix rows)\nvisualize_singular_vectors(Vt, \"Row Space (V^T)\", num_components, (1, image.shape[1]))\n\n# Plot Singular Values\nplt.figure(figsize=(8, 6))\nplt.plot(np.log(1+S), 'o-', label=\"Singular Values\")\nplt.xlabel(\"Index\")\nplt.ylabel(\"Singular Value\")\nplt.title(\"Singular Values Plot\")\nplt.legend()\nplt.grid()\nplt.show()\n\n```\n\n### Ploting the signal and noise part of an image \n\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom skimage import io, color\n\n# Load the image and convert it to grayscale\nimage = io.imread('TestImage.jpg')\nif image.ndim == 3:\n    image = color.rgb2gray(image)\n\n# Perform SVD\nU, S, VT = np.linalg.svd(image, full_matrices=False)\n\n# Number of components to keep\nk = 40  # Adjust this for more or fewer components\n\n# Reconstruct the signal part\nS_k = np.zeros_like(S)  # Create a zero array for singular values\nS_k[:k] = S[:k]  # Keep the largest k singular values\n\n# Reconstruct the signal image\nreconstructed_signal = U @ np.diag(S_k) @ VT\n\n# Extract noise\nnoise = image - reconstructed_signal\n# Convert images to uint8 for saving\nimage_uint8 = (image * 255).astype(np.uint8)\nreconstructed_signal_uint8 = (reconstructed_signal * 255).astype(np.uint8)\nnoise_uint8 = (noise * 255).astype(np.uint8)\n\n# Save each image as a PDF\nio.imsave('original_image.pdf', image_uint8)\nio.imsave('reconstructed_signal_k_{}.pdf'.format(k), reconstructed_signal_uint8)\nio.imsave('extracted_noise.pdf', noise_uint8)\n# Plotting\nplt.figure(figsize=(15, 10))\n\nplt.subplot(1, 3, 1)\nplt.title('Original Image')\nplt.imshow(image, cmap='gray')\nplt.axis('off')\n\nplt.subplot(1, 3, 2)\nplt.title('Reconstructed Signal (k={})'.format(k))\nplt.imshow(reconstructed_signal, cmap='gray')\nplt.axis('off')\n\nplt.subplot(1, 3, 3)\nplt.title('Extracted Noise')\nplt.imshow(noise, cmap='gray')\nplt.axis('off')\n\nplt.tight_layout()\n# Save the entire figure as a PDF\nplt.savefig('comparison_plot.pdf', bbox_inches='tight')\nplt.show()\n```\n\n\n### Compression quality with different values of k\n\n```{python}\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom skimage import io, color\nfrom skimage.metrics import peak_signal_noise_ratio as psnr\nfrom skimage.metrics import structural_similarity as ssim\n\n# Load the image and convert it to grayscale\nimage = io.imread('TestImage.jpg')\nif image.ndim == 3:\n    image = color.rgb2gray(image)\n\n# Initialize a list to store results\nresults = []\n\n# Define a range of k values\nk_values = [1, 5, 10, 20, 50, 100, 200, 400, 600, 800, 1000]\n\nfor k in k_values:\n    # Perform SVD\n    U, S, VT = np.linalg.svd(image, full_matrices=False)\n\n    # Reconstruct the signal part with k components\n    S_k = np.zeros_like(S)\n    S_k[:k] = S[:k]\n    reconstructed_signal = U @ np.diag(S_k) @ VT\n\n    # Compute PSNR and SSIM\n    current_psnr = psnr(image, reconstructed_signal)\n    \n    # Set data_range for SSIM\n    data_range = 1  # Use 255 if your image is in the range [0, 255]\n    current_ssim = ssim(image, reconstructed_signal, data_range=data_range)\n\n    # Append results\n    results.append({'k': k, 'PSNR': current_psnr, 'SSIM': current_ssim})\n# Create a DataFrame from the results\nresults_df = pd.DataFrame(results)\n\n# Display the DataFrame as a table\nprint(results_df)\n\n# Optionally, save the results to a CSV file\nresults_df.to_csv('psnr_ssim_variation.csv', index=False)\n\n# Plot the results\nplt.figure(figsize=(12, 6))\nplt.plot(results_df['k'], results_df['PSNR'], marker='o', label='PSNR')\nplt.plot(results_df['k'], results_df['SSIM'], marker='o', label='SSIM')\nplt.xscale('log')  # Log scale for better visualization\nplt.xlabel('Number of Components (k)')\nplt.ylabel('Value')\nplt.title('Variation of PSNR and SSIM with Different k Values')\nplt.legend()\nplt.grid()\nplt.savefig('psnr_ssim_variation_plot.pdf')\nplt.show()\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"workbook1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","manuscript":{"notebooks":[{"notebook":"notebooks/data-screening.ipynb","title":"Data Processing"}]},"formats":{"ieee-pdf":"default","ieee-html":"default"},"title":"SVD workbook","jypiter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}